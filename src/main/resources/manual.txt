1. 구조
package > common,config,controller,dto,entity,interceptor,repository,service

resources > application.properties, templates,static.files(파일 업로드)

tiles: tiles. xml , application.properties 에 설정

css : webapp > resources > css
view : webapp > WEB-INF > view > jsp

2. @component 는  @controller, @service , @entity 의 상위 개념

-

1. 인증 및 controller 별 접근
   interceptor > config/WebConfig
   redis > config/RedisConfig

2. file upload

3. session 공통 사용
   service > AuthService

4. 상수
   common/Constants


5. tomcat 배포
 - build.gradle  아래내용 추가
   apply plugin: 'war'
   bootWar {
   	archiveName("myyahoo.war")
   }
 - 우측 코끼리 build > bootWar 선택

 - tomcat > webapps에 파일 카피

 - tomcat conf/server.xml 에서 document root 수정
   <Context path="" docBase="/usr/local/tomcat9/webapps/myyahoo" reloadable="true"/>


6. interceptor 와 advice
   html은 GlobalHtmlContollerAdvice,  rest api GlobalRestControllerAdvice

인터셉터 대신에 컨트롤러들에 적용할 부가기능을 어드바이스로 만들어 AOP(Aspect Oriented Programming, 관점 지향 프로그래밍)를 적용할 수도 있다.
하지만 다음과 같은 이유들로 컨트롤러의 호출 과정에 적용되는 부가기능들은 인터셉터를 사용하는 편이 낫다.
Spring의 컨트롤러는 타입과 실행 메소드가 모두 제각각이라 포인트컷(적용할 메소드 선별)의 작성이 어렵다.
Spring의 컨트롤러는 파라미터나 리턴 값이 일정하지 않다.
즉, 타입이 일정하지 않고 호출 패턴도 정해져 있지 않기 때문에 컨트롤러에 AOP를 적용하려면 번거로운 부가 작업들이 생기게 된다.
=> 이해가 안된. interceptor에선 return 이 true/false 라서 response(json or return "html" 값을 얻기가 어렵다.
   그래서 interceptor에선 exception 발생시키고  advice에서 exception 받아서 error controller에 전달 또는 json error 메시지 출력한다.


7. Mybatis는 사용은 2가지 방법
   - sql을 java 파일로 생성
   - sql을 xml 로 생성